<?xml version="1.0"?>

<document>

  <properties>
    <title>Documentation</title>
  </properties>

  <body>
  
    <section name="About patterntesting-check">
      <p>
        PatternTesting Check (patterntesting-check) is a quality framework that 
	    allows to automatically verify that Architecture/Design recommendations
	    are implemented correctly in the code.
	    It provides different checks of known anti patterns (like using System.out
	    for logging) but provides also a test framework for better testing.
      </p>
    </section>
  
    <section name="Introduction">
      <p>
        PatternTesting Check was in 2002 the starting point for
        PatternTesting. It was one of the first AspectJ library
        and provides some check for common anti pattern with Java.
        Some of these checks like damning the use of System.out
        or System.our are done during compile time,
        other checks like watching for null arguments are done during
        runtime.
      </p>
      <p>
        Now PatternTesting Check was splitted into:
      </p>
      <ul>
        <li>
          PatternTesting Check.CT
          for the checks during compile time,
        </li>
        <li>
          PatternTesting Check.RT
          for the check during runtime.
        </li>
      </ul>
      <p>
        PatternTesting Check was splitted because of performance problem with
        Eclipse 3.3. It is more than 30 times slower than Eclipse 3.4 for
        the incremental build so the static part (Check.CT) was extracted.
        The more interesting thing is the runtime part and
        now you can choose to use only the runtime part or both. 
      </p>
    </section>
    
    <section name="Recommendation">
      <p>
        Use at least Eclipse 3.4 - it is much much faster than Eclipse 3.3
        (see <a href="http://oli.blogger.de/stories/1365745/">Performance Boost with Eclise 3.4 / AJDT 1.6.3</a>).
      </p>
      <p>
        Some of the static checks in PatternTesting Check.CT
        can be done also by other tools like
        <a href="http://findbugs.sourceforge.net/">FindBugs</a> or
        <a href="http://pmd.sourceforge.net/">PMD</a>.
        The advantage of PatternTesting Check.CT is that it is part of
        the compile process - the user sees the warning immediately.
        Disadvantage: the compile process is a little bit slower.
      </p>
    </section>

    <section name="Hello World">
      <p>
        An actual hello-world example how to use PatternTesting
      </p>
      <p>
        A simple hello-world example how to use PatternTesting 0.6
        you can find on
        <a href="http://oli.blogger.de/stories/1242343/">Oli's blog</a>.
      </p>
      <p>
        An actual hello-world example how to use PatternTesting you
        can find in the
        <a href="http://patterntesting.sourceforge.net/wiki/index.php/Hello_World">PatternTesting Wiki</a>.
      </p>
    </section>
    
    <section name="More Samples">
      <p>
        For more examples look at
        <a href="../samples/index.html">PatternTesting-Samples</a>.
      </p>
    </section>

  </body>
  
</document>
