package patterntesting.exception.sql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * This Dummy statement just throws Exception and
 * is only necessary for testing.
 * 
 * @author Christian Heise
 *
 */
public class DummyStatement implements Statement {

	/**
	 * Checks if is wrapper for.
	 *
	 * @param iface the iface
	 * @return true, if is wrapper for
	 * @throws SQLException the sQL exception
	 * @see java.sql.Wrapper#isWrapperFor(java.lang.Class)
	 */
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Unwrap.
	 *
	 * @param <T> the generic type
	 * @param iface the iface
	 * @return the t
	 * @throws SQLException the sQL exception
	 * @see java.sql.Wrapper#unwrap(java.lang.Class)
	 */
	public <T> T unwrap(Class<T> iface) throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Adds the batch.
	 *
	 * @param sql the sql
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#addBatch(java.lang.String)
	 */
	public void addBatch(String sql) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Cancel.
	 *
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#cancel()
	 */
	public void cancel() throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Clear batch.
	 *
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#clearBatch()
	 */
	public void clearBatch() throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Clear warnings.
	 *
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#clearWarnings()
	 */
	public void clearWarnings() throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Close.
	 *
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#close()
	 */
	public void close() throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Close on completion.
	 *
	 * @throws SQLException the sQL exception
	 */
	public void closeOnCompletion() throws SQLException {
				throw new SQLException("Dummy exception. ");
	}

	/**
	 * Execute.
	 *
	 * @param sql the sql
	 * @return true, if successful
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#execute(java.lang.String)
	 */
	public boolean execute(String sql) throws SQLException {
		throw new SQLException("Dummy exception. ");
	}

	/**
	 * Execute.
	 *
	 * @param sql the sql
	 * @param autoGeneratedKeys the auto generated keys
	 * @return true, if successful
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#execute(java.lang.String, int)
	 */
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		throw new SQLException("Dummy exception. ");
	}

	/**
	 * Execute.
	 *
	 * @param sql the sql
	 * @param columnIndexes the column indexes
	 * @return true, if successful
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#execute(java.lang.String, int[])
	 */
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new SQLException("Dummy exception. ");
	}

	/**
	 * Execute.
	 *
	 * @param sql the sql
	 * @param columnNames the column names
	 * @return true, if successful
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#execute(java.lang.String, java.lang.String[])
	 */
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		throw new SQLException("Dummy exception. ");	
	}

	/**
	 * Execute batch.
	 *
	 * @return the int[]
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#executeBatch()
	 */
	public int[] executeBatch() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Execute query.
	 *
	 * @param sql the sql
	 * @return the result set
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#executeQuery(java.lang.String)
	 */
	public ResultSet executeQuery(String sql) throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Execute update.
	 *
	 * @param sql the sql
	 * @return the int
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#executeUpdate(java.lang.String)
	 */
	public int executeUpdate(String sql) throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Execute update.
	 *
	 * @param sql the sql
	 * @param autoGeneratedKeys the auto generated keys
	 * @return the int
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int)
	 */
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Execute update.
	 *
	 * @param sql the sql
	 * @param columnIndexes the column indexes
	 * @return the int
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int[])
	 */
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Execute update.
	 *
	 * @param sql the sql
	 * @param columnNames the column names
	 * @return the int
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#executeUpdate(java.lang.String, java.lang.String[])
	 */
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the connection.
	 *
	 * @return the connection
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getConnection()
	 */
	public Connection getConnection() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the fetch direction.
	 *
	 * @return the fetch direction
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getFetchDirection()
	 */
	public int getFetchDirection() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the fetch size.
	 *
	 * @return the fetch size
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getFetchSize()
	 */
	public int getFetchSize() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the generated keys.
	 *
	 * @return the generated keys
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getGeneratedKeys()
	 */
	public ResultSet getGeneratedKeys() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the max field size.
	 *
	 * @return the max field size
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getMaxFieldSize()
	 */
	public int getMaxFieldSize() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the max rows.
	 *
	 * @return the max rows
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getMaxRows()
	 */
	public int getMaxRows() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the more results.
	 *
	 * @return the more results
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getMoreResults()
	 */
	public boolean getMoreResults() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the more results.
	 *
	 * @param current the current
	 * @return the more results
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getMoreResults(int)
	 */
	public boolean getMoreResults(int current) throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the query timeout.
	 *
	 * @return the query timeout
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getQueryTimeout()
	 */
	public int getQueryTimeout() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the result set.
	 *
	 * @return the result set
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getResultSet()
	 */
	public ResultSet getResultSet() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the result set concurrency.
	 *
	 * @return the result set concurrency
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getResultSetConcurrency()
	 */
	public int getResultSetConcurrency() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the result set holdability.
	 *
	 * @return the result set holdability
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getResultSetHoldability()
	 */
	public int getResultSetHoldability() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the result set type.
	 *
	 * @return the result set type
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getResultSetType()
	 */
	public int getResultSetType() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the update count.
	 *
	 * @return the update count
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getUpdateCount()
	 */
	public int getUpdateCount() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Gets the warnings.
	 *
	 * @return the warnings
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#getWarnings()
	 */
	public SQLWarning getWarnings() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Checks if is close on completion.
	 *
	 * @return true, if is close on completion
	 * @throws SQLException the sQL exception
	 */
	public boolean isCloseOnCompletion() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Checks if is closed.
	 *
	 * @return true, if is closed
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#isClosed()
	 */
	public boolean isClosed() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Checks if is poolable.
	 *
	 * @return true, if is poolable
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#isPoolable()
	 */
	public boolean isPoolable() throws SQLException {
				throw new SQLException("Dummy exception. ");
		
	}

	/**
	 * Sets the cursor name.
	 *
	 * @param name the new cursor name
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#setCursorName(java.lang.String)
	 */
	public void setCursorName(String name) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Sets the escape processing.
	 *
	 * @param enable the new escape processing
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#setEscapeProcessing(boolean)
	 */
	public void setEscapeProcessing(boolean enable) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Sets the fetch direction.
	 *
	 * @param direction the new fetch direction
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#setFetchDirection(int)
	 */
	public void setFetchDirection(int direction) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Sets the fetch size.
	 *
	 * @param rows the new fetch size
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#setFetchSize(int)
	 */
	public void setFetchSize(int rows) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Sets the max field size.
	 *
	 * @param max the new max field size
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#setMaxFieldSize(int)
	 */
	public void setMaxFieldSize(int max) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Sets the max rows.
	 *
	 * @param max the new max rows
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#setMaxRows(int)
	 */
	public void setMaxRows(int max) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Sets the poolable.
	 *
	 * @param poolable the new poolable
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#setPoolable(boolean)
	 */
	public void setPoolable(boolean poolable) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

	/**
	 * Sets the query timeout.
	 *
	 * @param seconds the new query timeout
	 * @throws SQLException the sQL exception
	 * @see java.sql.Statement#setQueryTimeout(int)
	 */
	public void setQueryTimeout(int seconds) throws SQLException {
				throw new SQLException("Dummy exception. ");

	}

}
